// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: core/pb/fs_grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FsGrpc_TryStealInodeOwnership_FullMethodName = "/FsGrpc/TryStealInodeOwnership"
	FsGrpc_CreateFile_FullMethodName             = "/FsGrpc/CreateFile"
	FsGrpc_Unlink_FullMethodName                 = "/FsGrpc/Unlink"
	FsGrpc_OpenFile_FullMethodName               = "/FsGrpc/OpenFile"
	FsGrpc_ReleaseFileHandle_FullMethodName      = "/FsGrpc/ReleaseFileHandle"
	FsGrpc_ReadFile_FullMethodName               = "/FsGrpc/ReadFile"
	FsGrpc_WriteFile_FullMethodName              = "/FsGrpc/WriteFile"
	FsGrpc_CreateSymlink_FullMethodName          = "/FsGrpc/CreateSymlink"
	FsGrpc_ReadSymlink_FullMethodName            = "/FsGrpc/ReadSymlink"
	FsGrpc_MkDir_FullMethodName                  = "/FsGrpc/MkDir"
	FsGrpc_RmDir_FullMethodName                  = "/FsGrpc/RmDir"
	FsGrpc_OpenDir_FullMethodName                = "/FsGrpc/OpenDir"
	FsGrpc_ReleaseDirHandle_FullMethodName       = "/FsGrpc/ReleaseDirHandle"
	FsGrpc_ReadDir_FullMethodName                = "/FsGrpc/ReadDir"
	FsGrpc_LookUpInode_FullMethodName            = "/FsGrpc/LookUpInode"
	FsGrpc_LookUpInode2_FullMethodName           = "/FsGrpc/LookUpInode2"
	FsGrpc_GetInodeAttributes_FullMethodName     = "/FsGrpc/GetInodeAttributes"
	FsGrpc_SetInodeAttributes_FullMethodName     = "/FsGrpc/SetInodeAttributes"
	FsGrpc_ForgetInode_FullMethodName            = "/FsGrpc/ForgetInode"
	FsGrpc_ForgetInode2_FullMethodName           = "/FsGrpc/ForgetInode2"
)

// FsGrpcClient is the client API for FsGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsGrpcClient interface {
	// stealing
	TryStealInodeOwnership(ctx context.Context, in *TryStealInodeOwnershipRequest, opts ...grpc.CallOption) (*TryStealInodeOwnershipResponse, error)
	// file
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error)
	ReleaseFileHandle(ctx context.Context, in *ReleaseFileHandleRequest, opts ...grpc.CallOption) (*ReleaseFileHandleResponse, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	// symlinks
	CreateSymlink(ctx context.Context, in *CreateSymlinkRequest, opts ...grpc.CallOption) (*CreateSymlinkResponse, error)
	ReadSymlink(ctx context.Context, in *ReadSymlinkRequest, opts ...grpc.CallOption) (*ReadSymlinkResponse, error)
	// dir
	MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error)
	RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error)
	OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error)
	ReleaseDirHandle(ctx context.Context, in *ReleaseDirHandleRequest, opts ...grpc.CallOption) (*ReleaseDirHandleResponse, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error)
	LookUpInode(ctx context.Context, in *LookUpInodeRequest, opts ...grpc.CallOption) (*LookUpInodeResponse, error)
	LookUpInode2(ctx context.Context, in *LookUpInode2Request, opts ...grpc.CallOption) (*LookUpInode2Response, error)
	// both
	GetInodeAttributes(ctx context.Context, in *GetInodeAttributesRequest, opts ...grpc.CallOption) (*GetInodeAttributesResponse, error)
	SetInodeAttributes(ctx context.Context, in *SetInodeAttributesRequest, opts ...grpc.CallOption) (*SetInodeAttributesResponse, error)
	ForgetInode(ctx context.Context, in *ForgetInodeRequest, opts ...grpc.CallOption) (*ForgetInodeResponse, error)
	ForgetInode2(ctx context.Context, in *ForgetInode2Request, opts ...grpc.CallOption) (*ForgetInode2Response, error)
}

type fsGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFsGrpcClient(cc grpc.ClientConnInterface) FsGrpcClient {
	return &fsGrpcClient{cc}
}

func (c *fsGrpcClient) TryStealInodeOwnership(ctx context.Context, in *TryStealInodeOwnershipRequest, opts ...grpc.CallOption) (*TryStealInodeOwnershipResponse, error) {
	out := new(TryStealInodeOwnershipResponse)
	err := c.cc.Invoke(ctx, FsGrpc_TryStealInodeOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, FsGrpc_CreateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error) {
	out := new(UnlinkResponse)
	err := c.cc.Invoke(ctx, FsGrpc_Unlink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error) {
	out := new(OpenFileResponse)
	err := c.cc.Invoke(ctx, FsGrpc_OpenFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ReleaseFileHandle(ctx context.Context, in *ReleaseFileHandleRequest, opts ...grpc.CallOption) (*ReleaseFileHandleResponse, error) {
	out := new(ReleaseFileHandleResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ReleaseFileHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ReadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, FsGrpc_WriteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) CreateSymlink(ctx context.Context, in *CreateSymlinkRequest, opts ...grpc.CallOption) (*CreateSymlinkResponse, error) {
	out := new(CreateSymlinkResponse)
	err := c.cc.Invoke(ctx, FsGrpc_CreateSymlink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ReadSymlink(ctx context.Context, in *ReadSymlinkRequest, opts ...grpc.CallOption) (*ReadSymlinkResponse, error) {
	out := new(ReadSymlinkResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ReadSymlink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) MkDir(ctx context.Context, in *MkDirRequest, opts ...grpc.CallOption) (*MkDirResponse, error) {
	out := new(MkDirResponse)
	err := c.cc.Invoke(ctx, FsGrpc_MkDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error) {
	out := new(RmDirResponse)
	err := c.cc.Invoke(ctx, FsGrpc_RmDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error) {
	out := new(OpenDirResponse)
	err := c.cc.Invoke(ctx, FsGrpc_OpenDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ReleaseDirHandle(ctx context.Context, in *ReleaseDirHandleRequest, opts ...grpc.CallOption) (*ReleaseDirHandleResponse, error) {
	out := new(ReleaseDirHandleResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ReleaseDirHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error) {
	out := new(ReadDirResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ReadDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) LookUpInode(ctx context.Context, in *LookUpInodeRequest, opts ...grpc.CallOption) (*LookUpInodeResponse, error) {
	out := new(LookUpInodeResponse)
	err := c.cc.Invoke(ctx, FsGrpc_LookUpInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) LookUpInode2(ctx context.Context, in *LookUpInode2Request, opts ...grpc.CallOption) (*LookUpInode2Response, error) {
	out := new(LookUpInode2Response)
	err := c.cc.Invoke(ctx, FsGrpc_LookUpInode2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) GetInodeAttributes(ctx context.Context, in *GetInodeAttributesRequest, opts ...grpc.CallOption) (*GetInodeAttributesResponse, error) {
	out := new(GetInodeAttributesResponse)
	err := c.cc.Invoke(ctx, FsGrpc_GetInodeAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) SetInodeAttributes(ctx context.Context, in *SetInodeAttributesRequest, opts ...grpc.CallOption) (*SetInodeAttributesResponse, error) {
	out := new(SetInodeAttributesResponse)
	err := c.cc.Invoke(ctx, FsGrpc_SetInodeAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ForgetInode(ctx context.Context, in *ForgetInodeRequest, opts ...grpc.CallOption) (*ForgetInodeResponse, error) {
	out := new(ForgetInodeResponse)
	err := c.cc.Invoke(ctx, FsGrpc_ForgetInode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsGrpcClient) ForgetInode2(ctx context.Context, in *ForgetInode2Request, opts ...grpc.CallOption) (*ForgetInode2Response, error) {
	out := new(ForgetInode2Response)
	err := c.cc.Invoke(ctx, FsGrpc_ForgetInode2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsGrpcServer is the server API for FsGrpc service.
// All implementations must embed UnimplementedFsGrpcServer
// for forward compatibility
type FsGrpcServer interface {
	// stealing
	TryStealInodeOwnership(context.Context, *TryStealInodeOwnershipRequest) (*TryStealInodeOwnershipResponse, error)
	// file
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error)
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error)
	ReleaseFileHandle(context.Context, *ReleaseFileHandleRequest) (*ReleaseFileHandleResponse, error)
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	// symlinks
	CreateSymlink(context.Context, *CreateSymlinkRequest) (*CreateSymlinkResponse, error)
	ReadSymlink(context.Context, *ReadSymlinkRequest) (*ReadSymlinkResponse, error)
	// dir
	MkDir(context.Context, *MkDirRequest) (*MkDirResponse, error)
	RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error)
	OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error)
	ReleaseDirHandle(context.Context, *ReleaseDirHandleRequest) (*ReleaseDirHandleResponse, error)
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error)
	LookUpInode(context.Context, *LookUpInodeRequest) (*LookUpInodeResponse, error)
	LookUpInode2(context.Context, *LookUpInode2Request) (*LookUpInode2Response, error)
	// both
	GetInodeAttributes(context.Context, *GetInodeAttributesRequest) (*GetInodeAttributesResponse, error)
	SetInodeAttributes(context.Context, *SetInodeAttributesRequest) (*SetInodeAttributesResponse, error)
	ForgetInode(context.Context, *ForgetInodeRequest) (*ForgetInodeResponse, error)
	ForgetInode2(context.Context, *ForgetInode2Request) (*ForgetInode2Response, error)
	mustEmbedUnimplementedFsGrpcServer()
}

// UnimplementedFsGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedFsGrpcServer struct {
}

func (UnimplementedFsGrpcServer) TryStealInodeOwnership(context.Context, *TryStealInodeOwnershipRequest) (*TryStealInodeOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryStealInodeOwnership not implemented")
}
func (UnimplementedFsGrpcServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFsGrpcServer) Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (UnimplementedFsGrpcServer) OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedFsGrpcServer) ReleaseFileHandle(context.Context, *ReleaseFileHandleRequest) (*ReleaseFileHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseFileHandle not implemented")
}
func (UnimplementedFsGrpcServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFsGrpcServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFsGrpcServer) CreateSymlink(context.Context, *CreateSymlinkRequest) (*CreateSymlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymlink not implemented")
}
func (UnimplementedFsGrpcServer) ReadSymlink(context.Context, *ReadSymlinkRequest) (*ReadSymlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSymlink not implemented")
}
func (UnimplementedFsGrpcServer) MkDir(context.Context, *MkDirRequest) (*MkDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedFsGrpcServer) RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDir not implemented")
}
func (UnimplementedFsGrpcServer) OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDir not implemented")
}
func (UnimplementedFsGrpcServer) ReleaseDirHandle(context.Context, *ReleaseDirHandleRequest) (*ReleaseDirHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDirHandle not implemented")
}
func (UnimplementedFsGrpcServer) ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedFsGrpcServer) LookUpInode(context.Context, *LookUpInodeRequest) (*LookUpInodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpInode not implemented")
}
func (UnimplementedFsGrpcServer) LookUpInode2(context.Context, *LookUpInode2Request) (*LookUpInode2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpInode2 not implemented")
}
func (UnimplementedFsGrpcServer) GetInodeAttributes(context.Context, *GetInodeAttributesRequest) (*GetInodeAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInodeAttributes not implemented")
}
func (UnimplementedFsGrpcServer) SetInodeAttributes(context.Context, *SetInodeAttributesRequest) (*SetInodeAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInodeAttributes not implemented")
}
func (UnimplementedFsGrpcServer) ForgetInode(context.Context, *ForgetInodeRequest) (*ForgetInodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetInode not implemented")
}
func (UnimplementedFsGrpcServer) ForgetInode2(context.Context, *ForgetInode2Request) (*ForgetInode2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetInode2 not implemented")
}
func (UnimplementedFsGrpcServer) mustEmbedUnimplementedFsGrpcServer() {}

// UnsafeFsGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsGrpcServer will
// result in compilation errors.
type UnsafeFsGrpcServer interface {
	mustEmbedUnimplementedFsGrpcServer()
}

func RegisterFsGrpcServer(s grpc.ServiceRegistrar, srv FsGrpcServer) {
	s.RegisterService(&FsGrpc_ServiceDesc, srv)
}

func _FsGrpc_TryStealInodeOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryStealInodeOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).TryStealInodeOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_TryStealInodeOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).TryStealInodeOwnership(ctx, req.(*TryStealInodeOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_Unlink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).Unlink(ctx, req.(*UnlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_OpenFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).OpenFile(ctx, req.(*OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ReleaseFileHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseFileHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ReleaseFileHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ReleaseFileHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ReleaseFileHandle(ctx, req.(*ReleaseFileHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_CreateSymlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).CreateSymlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_CreateSymlink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).CreateSymlink(ctx, req.(*CreateSymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ReadSymlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ReadSymlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ReadSymlink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ReadSymlink(ctx, req.(*ReadSymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_MkDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).MkDir(ctx, req.(*MkDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_RmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).RmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_RmDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).RmDir(ctx, req.(*RmDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_OpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).OpenDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_OpenDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).OpenDir(ctx, req.(*OpenDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ReleaseDirHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseDirHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ReleaseDirHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ReleaseDirHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ReleaseDirHandle(ctx, req.(*ReleaseDirHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ReadDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_LookUpInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpInodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).LookUpInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_LookUpInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).LookUpInode(ctx, req.(*LookUpInodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_LookUpInode2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpInode2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).LookUpInode2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_LookUpInode2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).LookUpInode2(ctx, req.(*LookUpInode2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_GetInodeAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInodeAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).GetInodeAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_GetInodeAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).GetInodeAttributes(ctx, req.(*GetInodeAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_SetInodeAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInodeAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).SetInodeAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_SetInodeAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).SetInodeAttributes(ctx, req.(*SetInodeAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ForgetInode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetInodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ForgetInode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ForgetInode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ForgetInode(ctx, req.(*ForgetInodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsGrpc_ForgetInode2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetInode2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsGrpcServer).ForgetInode2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsGrpc_ForgetInode2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsGrpcServer).ForgetInode2(ctx, req.(*ForgetInode2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FsGrpc_ServiceDesc is the grpc.ServiceDesc for FsGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FsGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FsGrpc",
	HandlerType: (*FsGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryStealInodeOwnership",
			Handler:    _FsGrpc_TryStealInodeOwnership_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FsGrpc_CreateFile_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _FsGrpc_Unlink_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _FsGrpc_OpenFile_Handler,
		},
		{
			MethodName: "ReleaseFileHandle",
			Handler:    _FsGrpc_ReleaseFileHandle_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _FsGrpc_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _FsGrpc_WriteFile_Handler,
		},
		{
			MethodName: "CreateSymlink",
			Handler:    _FsGrpc_CreateSymlink_Handler,
		},
		{
			MethodName: "ReadSymlink",
			Handler:    _FsGrpc_ReadSymlink_Handler,
		},
		{
			MethodName: "MkDir",
			Handler:    _FsGrpc_MkDir_Handler,
		},
		{
			MethodName: "RmDir",
			Handler:    _FsGrpc_RmDir_Handler,
		},
		{
			MethodName: "OpenDir",
			Handler:    _FsGrpc_OpenDir_Handler,
		},
		{
			MethodName: "ReleaseDirHandle",
			Handler:    _FsGrpc_ReleaseDirHandle_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _FsGrpc_ReadDir_Handler,
		},
		{
			MethodName: "LookUpInode",
			Handler:    _FsGrpc_LookUpInode_Handler,
		},
		{
			MethodName: "LookUpInode2",
			Handler:    _FsGrpc_LookUpInode2_Handler,
		},
		{
			MethodName: "GetInodeAttributes",
			Handler:    _FsGrpc_GetInodeAttributes_Handler,
		},
		{
			MethodName: "SetInodeAttributes",
			Handler:    _FsGrpc_SetInodeAttributes_Handler,
		},
		{
			MethodName: "ForgetInode",
			Handler:    _FsGrpc_ForgetInode_Handler,
		},
		{
			MethodName: "ForgetInode2",
			Handler:    _FsGrpc_ForgetInode2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/pb/fs_grpc.proto",
}
